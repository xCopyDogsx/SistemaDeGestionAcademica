<!DOCTYPE html>
<html lang="es">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="shortcut icon" href="\img\principal\header.png" type="image/png" />
    <link rel="apple-touch-icon" href="\img\principal\header.png" />

    @Styles.Render("~/Scripts/css/principal/bootstrap.min.css")
    @Styles.Render("~/Scripts/css/principal/pogo-slider.min.css")
    @Styles.Render("~/Scripts/css/principal/style.css")
    @Styles.Render("~/Scripts/css/principal/responsive.css")
    @Styles.Render("~/Scripts/css/principal/custom.css")
    
</head>
<body id="home" data-spy="scroll" data-target="#navbar-wd" data-offset="98">

    <!-- LOADER -->
    <div id="preloader">
        <div class="loader">
            <img src="\img\principal\loader.gif" alt="#" />
        </div>
    </div>
    <header class="top-header">
        <nav class="navbar header-nav navbar-expand-lg">
            <div class="container-fluid">
                <a class="navbar-brand" href="index.html"><img src="\img\principal\logo.png" alt="image"></a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbar-wd" aria-controls="navbar-wd" aria-expanded="false" aria-label="Toggle navigation">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
                <div class="collapse navbar-collapse justify-content-end" id="navbar-wd">
                    <ul class="navbar-nav">
                        <li><a class="nav-link active">@Html.ActionLink("Inicio", "Index", "Home")</a></li>
                        <li><a class="nav-link">@Html.ActionLink("Acerca de nosotros", "About", "Home")</a></li>
                        @if (Session["User"] == null)
                        {
                            <li><a class="nav-link">@Html.ActionLink("Sistema de Gestión Académica", "SGA", "Login")</a></li>
                        }
                        else
                        {
                           <li><a class="nav-link">@Html.ActionLink("Volver al panel", "Index", "Panel")</a></li>
                        }
                        <li><a class="nav-link">@Html.ActionLink("Contactenos", "Contact", "Home")</a></li>
                    </ul>
                </div>
                <div class="search-box">
                    <input type="text" class="search-txt" placeholder="Search">
                    <a class="search-btn">
                        <img src="\img\principal\search_icon.png" alt="#" />
                    </a>
                </div>
            </div>
        </nav>
    </header>
    
        @RenderBody()

    
        <footer class="footer-box">
            <div class="container">

                <div class="row">

                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-3">
                        <div class="footer_blog">
                            <div class="full margin-bottom_30">
                                <img src="\img\principal\footer_logo.png" alt="#" />
                            </div>
                            <div class="full white_fonts">
                                <p>
                                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                                    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip
                                </p>
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-3">
                        <div class="footer_blog footer_menu white_fonts">
                            <h3>Mapa del sitio</h3>
                            <ul>
                                <li><a class="nav-link active">@Html.ActionLink("Inicio", "Index", "Home")</a></li>
                                <li><a class="nav-link">@Html.ActionLink("Acerca de nosotros", "About", "Home")</a></li>
                                <li><a class="nav-link">@Html.ActionLink("Docentes y estudiantes", "SGA", "Home")</a></li>
                                <li><a class="nav-link">@Html.ActionLink("Administrativos", "Admin", "Home")</a></li>
                                <li><a class="nav-link">@Html.ActionLink("Contactenos", "Contact", "Home")</a></li>
                            </ul>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-3">
                        <div class="footer_blog full white_fonts">
                            <h3>Boletín de noticias</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do</p>
                            <div class="newsletter_form">
                                <form action="index.html">
                                    <input type="email" placeholder="Email" name="#" required />
                                    <button>Enviar</button>
                                </form>
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-3">
                        <div class="footer_blog full white_fonts">
                            <h3>Contactanos</h3>
                            <ul class="full">
                                <li><img src="\img\principal\i5.png"><span>Calle 127<br>Bogotá, Colombia</span></li>
                                <li><img src="\img\principal\i6.png"><span>harrowschool@gmail.com</span></li>
                                <li><img src="\img\principal\i7.png"><span>+57123456789</span></li>
                            </ul>
                        </div>
                    </div>

                </div>

            </div>
        </footer>
        <!-- End Footer -->

        <div class="footer_bottom">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <p class="crp">© Copyrights 2021 design by harrow school</p>
                    </div>
                </div>
            </div>
        </div>

        <a href="#" id="scroll-to-top" class="hvr-radial-out"><i class="fa fa-angle-up"></i></a>
  
    @Scripts.Render("~/Scripts/js/principal/jquery.min.js")
    @Scripts.Render("~/Scripts/js/principal/popper.min.js")
    @Scripts.Render("~/Scripts/js/principal/bootstrap.min.js")
    @Scripts.Render("~/Scripts/js/principal/jquery.magnific-popup.min.js")
    @Scripts.Render("~/Scripts/js/principal/jquery.pogo-slider.min.js")
    @Scripts.Render("~/Scripts/js/principal/slider-index.js")
    @Scripts.Render("~/Scripts/js/principal/smoothscroll.js")
    @Scripts.Render("~/Scripts/js/principal/form-validator.min.js")
    @Scripts.Render("~/Scripts/js/principal/contact-form-script.js")
    @Scripts.Render("~/Scripts/js/principal/isotope.min.js")
    @Scripts.Render("~/Scripts/js/principal/images-loded.min.js")
    @Scripts.Render("~/Scripts/js/principal/custom.js")
    @RenderSection("scripts", required: false)

    <script>
        /* counter js */

        (function ($) {
            $.fn.countTo = function (options) {
                options = options || {};

                return $(this).each(function () {
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                        increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var self = this,
                        $self = $(this),
                        loopCount = 0,
                        value = settings.from,
                        data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.html(formattedValue);
                    }
                });
            };

            $.fn.countTo.defaults = {
                from: 0,               // the number the element should start at
                to: 0,                 // the number the element should end at
                speed: 1000,           // how long it should take to count between the target numbers
                refreshInterval: 100,  // how often the element should be updated
                decimals: 0,           // the number of decimal places to show
                formatter: formatter,  // handler for formatting the value before rendering
                onUpdate: null,        // callback method for every time the element is updated
                onComplete: null       // callback method for when the element finishes updating
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals);
            }
        }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(count);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });
    </script>

</body>
</html>
